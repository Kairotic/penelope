import Sound.Tidal.VisCycle
import Data.Colour
import Data.Colour.Names
let v = visCycle "demo" ""
x1 silence
import Sound.Tidal.Vis


let and a b | a == white && b == white = white
    and a b | otherwise = black
    invert a | a == black = white
             | otherwise = black

vPDF "test.pdf" (100, 20) $
  fast 48 $
  stack [superimpose id $ every 3 (invert <$>) $ superimpose (iter 4) $ superimpose ((1/2) <~) $ "[black black white white]"
        , superimpose id $ every 2 (invert <$>) $ superimpose (iter 4) $ superimpose ((1/2) <~) $ "[black black white white]"
        , superimpose id $ every 4 (slow 2 . (invert <$>)) $ superimpose (iter 4) $ superimpose ((1/2) <~) $ "[black black white white]"
        , superimpose id $ whenmod 16 4 ( (invert <$>)) $ superimpose (iter 4) $ superimpose ((1/2) <~) $ "[black white]"
        , superimpose id $ whenmod 16 4 ( (invert <$>)) $ superimpose (iter 4) $ "[black white]"
        , superimpose id $ whenmod 16 4 ( (invert <$>)) $ superimpose (iter 4) $ "[<black white> <white black>]"
        , superimpose id $ whenmod 16 4 ( (invert <$>)) $ superimpose (iter 4) $ "[<black white> <white black> <black white black> <white black white>]"
        , (invert <$> (superimpose id $ whenmod 16 4 ( (invert <$>)) $ superimpose (iter 4) $ "[<black white> <white black> <black white black> <white black white>]" :: Pattern ColourD))
        , every 2 (slow 2) (invert <$> (superimpose id $ whenmod 16 4 ( (invert <$>)) $ superimpose (iter 4) $ "[<black white> <white black> <black white black> <white black white>]" :: Pattern ColourD))
        , superimpose (invert <$>) $ slow (3/2) $ ("black black white white black white" :: Pattern ColourD)
        ]


:t invert


vSVG "piece5.svg" (120, 20) $
  fast 32 $
  stack [superimpose id $ superimpose id $ superimpose id $ superimpose ((invert <$>) . rev) $ superimpose ((1/12) <~)$ iter 6 ("black white@5 black white@5" :: Pattern ColourD),
         chunk 3 (invert <$>) $ iter 3 $ (superimpose id $ superimpose id $ superimpose rev $ superimpose ((invert <$>) . (inside 2 rev)) $ superimpose ((1/12) <~)$ iter 6 ("black white@5 black white@5" :: Pattern ColourD))
        ]

vPDF "test.pdf" (120, 16) $
  fast 16 $
  stack [superimpose (invert <$>) $ chunk 2 (invert <$>) ("black white@5 black white@5" :: Pattern ColourD)
         , iter 12 $ superimpose id $ superimpose (invert <$>) $ chunk 3 (invert <$>) ("black white@5 black white@5" :: Pattern ColourD)
         , superimpose id $ iter 12 $ superimpose rev $ superimpose (invert <$>) $ chunk 3 (invert <$>) ("black white@5 white black@5" :: Pattern ColourD)
        ]

vPDF "test.pdf" (120, 32) $
  fast 32 $ superimpose id $ superimpose (invert <$>) $ off 0.25 (rev) $ superimpose ((invert <$>) . (0.5 <~)) $ iter 4 $ "black black white black"

vPDF "test.pdf" (120, 32) $
  fast 32 $ superimpose (iter 4) $ superimpose (iter 8) $ superimpose (0.5 <~) $ superimpose (0.25 <~) $ "[black white, black white black white,white black white black, white black]"

vPDF "test.pdf" (120,32) $ "black"

vPDF "test.pdf" (120,64) $
  fast 32 $
  cat [
    stack [
    stut' 4 "0.125" (invert <$>) $ superimpose rev $ superimpose rev $ "[black white, black white black white,white black]"
    , iter 4 $ stut' 4 "0.125" (invert <$>) $ superimpose rev $ superimpose rev $ "[black white, black white black white,white black]"
    , stut' 2 "0.125" (invert <$>) $ superimpose rev $ superimpose rev $ "[black white, black white black white,white black]"
    ]
]

vPDF "test.pdf" (240,10) $ superimpose id $ fast 32 $ superimpose (invert <$>) $ superimpose (3 <~) $ superimpose (2 <~) $ chunk 4 (invert <$>) $ iter 4 "[black white white white black white]"


vPDF "test.pdf" (240,10) $ superimpose id $ fast 32 $ superimpose (invert <$>) $ superimpose (3 <~) $ superimpose (2 <~) $ chunk 4 (invert <$>) $ iter 4 "[white black white white black white]"

vPDF "test.pdf" (240,10) $ superimpose id $ fast 32 $ superimpose (invert <$>) $ superimpose (3 <~) $ superimpose (1 <~) $ chunk 4 (invert <$>) $ iter 4 "[white black white white black white]"

vPDF "test.pdf" (240,10) $ superimpose id $ fast 32 $ superimpose (invert <$>) $ superimpose (3 <~) $ superimpose (1 <~) $ chunk 4 (invert <$>) $ iter 3 "[white black white white black white]"

vPDF "test.pdf" (240,10) $ superimpose id $ fast 32 $ superimpose (invert <$>) $ superimpose ("<3 4>" <~) $ superimpose (1 <~) $ chunk 4 (invert <$>) $ iter 3 "[white black white white black white]"


let sometimes f p = (\x v -> (x)) <$> p <*> sine
